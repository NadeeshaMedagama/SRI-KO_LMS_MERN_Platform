name: Code Quality & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd Backend && npm install
        cd ../Frontend && npm install

    - name: Run backend tests with coverage
      run: |
        cd Backend
        npm run test:coverage || echo "Coverage tests not configured yet"

    - name: Run frontend tests with coverage
      run: |
        cd Frontend
        npm run test:coverage || echo "Coverage tests not configured yet"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./Backend/coverage/lcov.info,./Frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Code Quality Metrics
  quality-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd Backend && npm install
        cd ../Frontend && npm install

    - name: Run ESLint
      run: |
        cd Backend && npm run lint || echo "ESLint not configured"
        cd ../Frontend && npm run lint

    - name: Run Prettier check
      run: |
        cd Backend && npx prettier --check . || echo "Prettier not configured"
        cd ../Frontend && npx prettier --check .

    - name: Check code complexity
      run: |
        echo "Checking code complexity..."
        find Backend Frontend -name "*.js" -o -name "*.jsx" | xargs wc -l | tail -1

    - name: Generate quality report
      run: |
        echo "# Code Quality Report" > quality-report.md
        echo "" >> quality-report.md
        echo "## Metrics" >> quality-report.md
        echo "- Total lines of code: $(find Backend Frontend -name "*.js" -o -name "*.jsx" | xargs wc -l | tail -1 | awk '{print $1}')" >> quality-report.md
        echo "- Number of files: $(find Backend Frontend -name "*.js" -o -name "*.jsx" | wc -l)" >> quality-report.md
        echo "" >> quality-report.md
        echo "## Recommendations" >> quality-report.md
        echo "1. Maintain test coverage above 80%" >> quality-report.md
        echo "2. Keep functions under 50 lines" >> quality-report.md
        echo "3. Use meaningful variable names" >> quality-report.md

    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: quality-report.md
        retention-days: 30

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd Backend && npm install
        cd ../Frontend && npm install

    - name: Build frontend
      run: |
        cd Frontend
        npm run build

    - name: Analyze bundle size
      run: |
        cd Frontend
        if [ -d "dist" ]; then
          echo "Bundle size analysis:"
          du -sh dist/
          find dist -name "*.js" -exec ls -lh {} \;
        fi

    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Accessibility Testing
  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd Frontend && npm install

    - name: Build frontend
      run: |
        cd Frontend
        npm run build

    - name: Run accessibility tests
      run: |
        cd Frontend
        npm run test:a11y || echo "Accessibility tests not configured yet"

    - name: Check for accessibility issues
      run: |
        echo "Checking for common accessibility issues..."
        # Add accessibility checks here
        echo "Accessibility check completed"
